Разделы:
О проекте и участниках
Проект GSPC: Greek-Slavonic Parallel Corpus является результатом работы студентов магистратуры "Цифровые методы в гуманитарных науках" НИУ ВШЭ.
Цель проекта - создание алгоритма выравнивания богослужебных текстов сложной структуры внутри билингвального корпуса. На данном этапе работы для проектирования алгоритма используются тексты Цветной Триоди на греческом и церковнославянском языках.
Участники:
Шадрин Лев (добавить инфо о нас?)
Дрожжина Анастасия
Куратор проекта:
игумен Пантелеимон (Королев), настоятель Данилова монастыря в Переславле-Залесском.
Работа над проектом началась в декабре 2021 года в рамках научно-исследовательского проектного семинара программы “Цифровые методы в гуманитарных науках” НИУ-ВШЭ. Консультативную поддержку проекту оказывает Анастасия Александровна Бонч-Осмоловская.
Цветная Триодь
Цветная Триодь включает в себя богослужебные последования пасхального цикла, то есть круг подвижных праздников от самой Пасхи до Недели Всех святых, даты которых меняются в зависимости от дня празднования Пасхи.
Высокая значимость Цветной Триоди как компонента годового круга церковных служений способствовала выбору этого текста в качестве материала для нашей работы.
Греческий текст Цветной Триоди выгружен с сайта Греческой православной архиепископии Америки (Раздел православных литургических текстов на греческом языке на портале Американской архиепископии (https://glt.goarch.org/#04).
Церковнославянский текст Цветной Триоди выгружен с сайта проекта «Азбука веры». (Проект «Азбука веры» (https://azbyka.ru/otechnik/Pravoslavnoe_Bogosluzhenie/triod-tsvetnaja/).

Специфика текста Цветной триоди
Темпоральная структура
Цветная триодь имеет строгую внутреннюю временную структуру, которая включает в себя следующие уровни:
Неделя
День недели
Служба
—> На уровне темпоральной организации от элайнера ожидается строгое выравнивание элементов в билингвальном корпусе: неделя к неделе, день ко дню ИЛИ требуется разметка текста, которая бы позволила работать на более мелких уровнях, а не выравнивать текст целиком
Функциональная структура
Внутри текста Цветной Триоди можно выделить 2 уровня:
служебные комментариями по организации и проведению службы
тексты молитв и песнопений
—> Бинарная функциональная структура является одной из причин расхождения длины богослужебных текстов для разных языков. Так, в греческом тексте Цветной Триоди служебные комментарии представлены в значительно сокращенном виде по сравнению со схожими элементами церковнославянского текста. 
Порядок следования фрагментов
Тексты песнопений на различных языках могут иметь отличный друг от друга порядок следований, что создает перекрестную структуру внутри билингвального корпуса и значительно усложняет задачу параллельного выравнивания.
—> Разрозненный порядок следования молитв внутри элементов службы или дня затрудняет работу классических элайнеров (см.пункт “Готовые решения”). Необходимо устанавливать широкое окно для оценки близости различных компонентов
Тексты молитв
В текстах Цветной Триоди на обоих языках молитвы могут быть представлены как в сокращенном формате, так и целиком.
После текста молитвы может следовать как краткое служебное указание о повторении молитвы. В иных случаях, текст молитвы может дублироваться полностью в последующих абзацах, повторяясь необходимое количество раз для исполнения во время службы.
—> Для решения задачи по выравниванию корпуса требуется нормализация сводимых элементов.

Предварительная обработка текстов
Работа с html 
На веб-страницах, с которых были выгружены тексты для работы, фрагменты молитв и служебных указаний размечены при помощи параметров цвета внутри html-тегов. 
Тексты молитв выделены черным цветом, указаний - красным. Предположив, что сохранение данной структуры (см. особенность 2 раздела “Специфика текста Цветной триоди (в частности) и богослужебных текстов”) поможет улучшить результаты выравнивания корпуса, мы решили выгрузить тексты с сохранением цветовой разметки. 
Церковнославянский текст имел правильную html-структуру, сведения о цветовой маркировки были получены через регулярные выражения [https://github.com/Drozhzhinastya/GSPC/blob/main/texts/csl_tsvetnaya_triod/scrape.ipynb]
При работе с html структурой греческого текста мы столкнулись с ошибками в организации страницы: многие текстовые фрагменты не попадали в теги цветовой разметки. Для корректной выгрузки греческого текста был написан код [ССЫЛКА]
Цветовая маркировка отображается в [ССЫЛКА] - текст поделен между колонками black_text (тексты служб) и red_text (комментарии к текстам), сведения о структуре отражаются в столбце color (значения ‘red’ и ‘black’ соответственно).
Темпоральная разметка
Темпоральная разметка осуществлена вручную, отдельно для греческого и церковнославянского текстов, с двухуровневой структурой:
Недели (1-8)
Дни недели (1_1-1_2-1_3 .. 8.6-8.7.8-8)
Темпоральная разметка содержится в [ССЫЛКА] в столбце temp
Различный порядок следования молитв и песнопений
Оптимальными решениями для работы с этой особенностью служебных текстов, на наш взгляд являются механизмы контроля размера окна единиц, которые потенциально могут являться переводными компонентами (см. text-similarity)
Различное оформление текстов молитв
Развернутая структура оформления текста молитв сохраняется в csv файлах. Однако мы предполагаем, что для оптимизации параметров длины исходных текстов, релевантна работа с уникальными единицами текста. [ССЫЛКА на txt файлы с уникальными текстами - как для всей триоди, так и по дням]
Готовые пакеты решений (элайнеры)
На начальных этапах проекта предполагалось использовать элайнеры – готовые программные решения для задачи выравнивания текстов: Lingtrain Aligner, а также Hunalign и его пользовательскую оболочку LF-aligner. Рассмотрим каждый из инструментов в отдельности.
LF-aligner
LF-aligner является графическим интерфейсом Hunalign [ССЫЛКА НА ГИТХАБ]. Этот инструмент требует предварительной лемматизации (ссылка на раздел) обрабатываемых текстов.
Алгоритм Hunalign решает задачу выравнивания лемматизированных текстов по предложениям или параграфам – что соответствует элементам молитв в нашем случае. 
В Hunalign можно дополнительно подгрузить словарь переводных эквивалентов – в таком случае, алгоритм будет использовать его, комбинируя словарные данные с информацией о длине предложения по алгоритму Гейла-Черча. 
В отсутствии внешнего словаря алгоритм сперва обращается к длине предложения, а затем автоматически генерирует словарь на основе результатов первичного выравнивания по длине. После этого Hunalign выравнивает текст повторно, используя сгенерированные словарные данные.
При работе с Hunalign возникает проблема, связанная с отсутствием параметров контроля окна сравнения единиц текста, из-за чего инструмент не может справиться со сложной перекрестной структурой Цветной Триоди (см. особенность 3 раздела Специфика текста Цветной триоди (в частности) и богослужебных текстов).
Lingtrain-aligner
Среди преимуществ работы с Lingtrain Aligner [ССЫЛКА на их гитхаб] стоит отметить нетребовательность инструмента к предварительной подготовке текстов, а также относительную простоту запуска алгоритмов выравнивания. 
Пользователю не требуется осуществлять токенизацию и лемматизацию текста. Необходимо лишь определенным образом разметить текст [ССЫЛКА на хабр] и убедиться, что он соответствует следующим параметрам:
в случае если проставлены метки для заголовков, их число должно быть одинаковым для обоих текстов;
в тексте отсутствуют строки, заканчивающиеся точкой и не являющиеся концом абзаца; в противном случае, абзацы будут сегментированы по точкам
Работать с подготовленными корпусами можно из python при помощи библиотеки lingtrain-aligner.
Предварительная разметка оказывается полезной не только для выравнивания в элайнерах, но также помогает при создании визуализации результатов – html-книги с параллельными текстами. так как сохраняет метаданные, которые нуждаются в определенном оформлении (см. раздел Цели).
Формат выдачи результатов в виде html-книги, предусмотренный в lingtrain, не является оптимальным для целей проекта на данном этапе, поскольку мы заинтересованы в получении словаря переводных эквивалентов на уровне отдельных гимнов или предложений, а также в оценке качества выравнивания.
[ССЫЛКА на наш код на гитхабе]
Лемматизация
Для чего?
Лемматизация как инструмент работы с элайнерами
При решении задачи параллельного выравнивания текстов лемматизация может оказаться необходимой для дальнейшей обработки текста с помощью элайнеров или пайплайна, использующего словарь переводных эквивалентов (в нашем случае, при работе с LF-aligner).
В других ситуациях – например, при использовании векторных моделей наподобие Lingtrain Aligner – необходимость в лемматизации текстов пропадает.
Улучшение качества лемматизации служебных текстов может являться отдельной исследовательской задачей, актуальной для двух направлений развития проекта:
создание словаря переводных эквивалентов
оценка и улучшение качества выравнивания текстов по предложениям (см.пункт ‘Вопрос оценки качества выравнивания’)
Лемматизация текстов Цветной триоди
Церковнославянский текст
В условиях отсутствия готового модуля, позволяющего провести лемматизацию церковнославянского текста, а также учитывая описанную специфику Цветной Триоди, было решено попробовать лемматизировать Триодь, экспериментируя с моделями современного русского языка (Spacy, PyMorphy2, UDPipe), так и используя модели древних языков (UDPipe).
Результаты лемматизации Spacy и PyMorphy2 показали крайне низкое качество, и эти инструменты были исключены из списка рассматриваемых.
Для русского языка – современного и древнего – в UDPipe представлено 6 моделей. В таблице ниже изложены описания данных моделей:
Модель
Тексты, корпуса, трибанки модели
old_church_slavonic-proiel-ud-2.6-200830
тексты старославянских памятников, представленные в корпусе PROIEL
old_russian-rnc-ud-2.6-200830
памятники древнерусской и церковнославянской литературы, представленные в базе Национального корпуса русского языка
old_russian-torot-ud-2.6-200830
корпус древнерусских и старославянских текстов Torot
russian-syntagrus-ud-2.6-200830
художественные тексты и новостные издания современного русского языка аннотированного корпуса SynTagRus
russian-gsd-ud-2.6-200830
конвертированный корпус Google Stanford Dependencies
russian-taiga-ud-2.6-200830
художественные, новостные, научные датасеты, субтитры и поэзия современного русского языка, представленные в корпусе Taiga

Для оценки качества моделей, каждая из них была использована при лемматизации тестового фрагмента Триоди – текста службы Вознесения [ССЫЛКА].
Наименее удовлетворительные результаты были получены при работе с церковнославянской моделью old_church_slavonic-proiel-ud-2.6-200830. Модели, основанные на корпусах Torot и RNC проявили себя лучше. Однако, Torot оказалась чувствительной к знакам препинания – при работе с этой моделью текст нуждается в предварительном удалении пунктуации.
Ошибки лемматизации были в основном общие – например, парсеру не удалось правильно построить инфинитивы предиката празднуем и глаголет. С глаголет не справились и современные модели (SynTagRus, GSD, Taiga). В целом результаты последних были довольно ровными, хотя с некоторыми словоформами Taiga справлялась лучше, чем SynTagRus и GSD. Например, ей удалось распарсить словоформу вечерни (вечерня), с которой из других моделей справилась только Torot.
Помимо проблемы правильного построения начальной формы, возникли ошибки, связанные с омонимией. Так, модели GSD и Taiga, к примеру, не всегда могли принять правильное решение о начальной форме аккузатива и генитива существительного Господь (Господа), совпадающей с номинативом множественного числа господин. Лучшие результаты показала модель SynTagRus.
—> При распространении лемматизации на полный текст Триоди необходимо выявить модель с наилучшим качеством. По результатам экспериментов мы решили отказаться от PROIEL, а из современных моделей выбирать между Taiga и SynTagRus, хотя их качество при лемматизации службы одного дня оказалось не совсем идеальным.
Код и результаты лемматизации [ССЫЛКА]
Греческий текст
Для лемматизации древнегреческого текста используется модуль Backoff Lemmatizer библиотеки CLTK. Выбор лемматизатора основан на выводах, представленных в статье McGillivray-Vatri, авторы которой анализируют точность четырех программных решений для лемматизации текста: Diorisis, LAGT, GLEM, и CLTK. По результатам двух серий экспериментов CLTK показал сравнительно высокую точность подбора корректной леммы, что и послужило определяющим фактором при выборе данного модуля для работы в рамках проекта. 
Другим очевидным преимуществом backoff модуля является использование цепочки лемматизаторов: в случае неудачного результата при обработке токена программа обращается ко внешним лемматизаторам, пока не будет найдена лемма или не будут исчерпаны все указанные варианты. Данный подход существенно повышает точность обработки текста, однако имеет и определенные недостатки. Поскольку backoff-цикл прерывается при первой найденной лемме, результаты лемматизации будут сильно отличаться в зависимости от того порядка, в котором указаны внешние лемматизаторы в backoff-цепочке.
В качестве экспериментальных корпусов в проекте McGillivray-Vatri использовались классические тексты, что актуализирует проблему идентификации языка текста Цветной Триоди. 
Библиотека CLTK, как и прочие аналогичные инструменты, направлена на обработку классических текстов, а модели Backoff Lemmatizer для древнегреческого языка обучены на материалах проекта Perseus. Греческий текст Цветной Триоди, обрабатываемый в рамках проекта, довольно сложно поддается лингвистической классификации – необходим более глубокий анализ и консультация специалистов, чтобы выйти за рамки сформулированного внутри проекта условного обозначения греческий язык богослужебных текстов. Как и в случае с условно церковнославянским текстом, греческая Триодь находится на шкале между койне и греческим Нового Завета, сочетая элементы обеих форм греческого языка.
Ниже представлены результаты лемматизации греческого фрагмента службы Вознесения при помощи лемматизаторов CLTK и UDPipe, а также фрагмент исходного текста для сравнения:
Исходный текст:
Ὁ Κύριος ἀνελήφθη εἰς οὐρανούς, ἵνα πέμψῃ τὸν Παράκλητον τῷ κόσμῳ, οἱ οὐρανοὶ ἡτοίμασαν τὸν θρόνον αὐτοῦ, νεφέλαι τὴν ἐπίβασιν αὐτοῦ, Ἄγγελοι θαυμάζουσιν, ἄνθρωπον ὁρῶντες ὑπεράνω αὐτῶν, ὁ Πατὴρ ἐκδέχεται, ὃν ἐν κόλποις ἔχει συναΐδιον. Τὸ Πνεῦμα τὸ ἅγιον κελεύει πᾶσι τοῖς Ἀγγέλοις αὐτοῦ· Ἄρατε πύλας οἱ ἄρχοντες ἡμῶν, Πάντα τὰ ἔθνη κροτήσατε χεῖρας. ὅτι ἀνέβη Χριστός, ὅπου ἦν τὸ πρότερον.
CLTK:
ὁ κύριος ἀναλαμβάνω εἰς οὐρανός ἵνα πέμπω ὁ παράκλητος ὁ κόσμῳ, ὁ οὐρανός ἑτοιμάζω ὁ θρόνος αὐτός νεφέλη ὁ ἐπίβασις αὐτός ἄγγελος θαυμάζω ἄνθρωπος ὁράω ὑπεράνω αὐτός ὁ πατήρ ἐκδέχομαι ὅς ἐν κόλπος ἔχω συναΐδιον ὁ πνεῦμα ὁ ἅγιος κελεύω πᾶς ὁ ἄγγελος αὐτός ἀείρω πύλη ὁ ἄρχων ἡμεῖς πᾶς ὁ ἔθνος κροτέω χείρ ὅτι ἀναβαίνω χριστός ὅπου εἰμί ὁ πρότερος
UDPipe - Perseus
ὁ Κύριος ἀαλαμβάνω εἰς οὐρανός, ἵνα πέμπω ὁ Παράκλητος ὁ κόσμος , ὁ οὐρανός ἑτοιμάζω ὁ θρόνος αὐτός , νεφέλα ὁ ἐπίβασις αὐτός , Ἄγγελοι θαυμάζω , ἄνθρωπος ὁράω ὑπεράνω αὐτός , ὁ Πατὴρ ἐκδέχομαι , ὅς ἐν κόλπος ἔχω συναΐδιος ὁ Πνεῦμα ὁ ἅγιος κελεύω πᾶς ὁ Ἀγγέλοί αὐτός · Ἄρατε πύλη ὁ ἄρχων ἐγώ , πᾶς ὁ ἔθνος κροτάω χείρ ὅτι ἀνέβη Χριστός , ὅπου εἰμί ὁ πρότερος
Как видно из примеров, оба лемматизатора показывают довольно высокую точность. CLTK не справился со словом ὁ κόσμος (здесь в значении «мир»), оставив его в форме дательного падежа. Возможной причиной ошибки может являться iota subscriptum (подстрочная йота), встречающаяся, среди прочего, в формах существительных дательного падежа. Потенциальным решением подобной проблемы может быть замена таких букв на формы iota adscriptum на этапе предварительной обработки текста: ῳ –> ωι.
Фрагмент, обработанный при помощи UDPipe, содержит больше неточностей: диалектная форма νεφέλα вместо ожидаемого νεφέλη («облако»), пропущенная буква «ню» в глаголе
ἀαλαμβάνω (здесь «возношусь»), а также необработанные формы ἄρατε (αἴρω, ἀείρω, «поднимаю, беру») и ἀνέβη (ἀναβαίνω, «восхожу»). При этом, UDPipe распознает именованные сущности, что может оказаться актуальным, если будет решено добавить подобный функционал в пайплайн.
Код и результаты лемматизации [ССЫЛКА]
Text-similarity


Задача оценки семантического сходства (text-similarity) заключается в определении степени схожести двух предложений с точки зрения транслируемого смысла.

Семантический поиск направлен на повышение точности сопоставления текстовых единиц путем понимания содержания поискового запроса. В отличие от использования только лексических совпадений, семантический поиск также может находить синонимы и другие единицы, имеющие схожий контекст употребления, поскольку этот алгоритм основывается на эмбеддингах – векторных представлениях текстовых единиц. Термин "embedding", взятый из английской литературы, используется для описания процесса, когда модель оцифровывает смысл слов и записывает его в виде упорядоченного набора числовых значений – вектора.

Наиболее эффективным способом построения моделей естественного языка является обучение нейронных сетей на основе архитектуры «трансформер». В качестве примера можно привести BERT [https://arxiv.org/abs/1810.04805] – модель. которая используется для определения сходства слов и предложений. 

Более качественные результаты можно получить, оптимизируя BERT под конкретные задачи. К примеру, модель SBERT [https://arxiv.org/pdf/1908.10084.pdf] обучена непосредственно для работы с задачами по определению схожести предложений на основе косинусной меры.

Как отмечают разработчики модели [https://habr.com/ru/companies/sberdevices/articles/527576/], её “архитектура представляет собой сиамскую нейронную сеть с тремя входами для триплета  «anchor — positive — negative».  К каждому из входов применяется модуль BERT, который и будет выполнять роль NLU в этом эксперименте. Модуль содержит в себе wordpiece-токенизатор для преобразования входных строк в BERT-совместимый формат (input_ids, input_mask, token_type_ids), а также саму обучаемую модель BERT для векторизации текста.”

В результате дообучения модели SBERT для задачи поиска переводных эквивалентов было получено множество вариантов мультиязычных моделей [https://huggingface.co/models?pipeline_tag=sentence-similarity&sort=downloads&search=multi]. 

В настоящий момент мы считаем, что подобные мультиязыковые модели могут значительно приблизить проект к решению изначальной задачи, потенциально обеспечивая более высокое качество поиска наиболее схожих единиц греческого и церковнославянского текста. 

В репозитории представлен код для работы с нашим текстом [ССЫЛКА], а также результаты работы с моделью sentence-transformers/
all-MiniLM-L6-v2, которая на наш взгляд демонстрирует более высокое качество сведения текстов Триоди. 

Эксперименты проводились как на уровне отдельных предложений, так и на уровне гимнов (минимальных единиц разметки текста, представленной в нашей csv - см.выше). Каждое уникальное предложение/гимн греческого текста сопоставлялось с каждым предложением церковнославянского текста. Результаты экспериментов представлены в csv таблице [ССЫЛКА], где собраны топ-5 церковнославянских предложений, выделенных моделью как наиболее близкие соответствующему греческому элементу.

В дальнейшей перспективе предстоит разработать решение для оценки качества сведения текстов и улучшения результатов выравнивания с опорой на него.

Вопрос об оценке качества сведения текстов
В этой связи на настоящий момент мы выявили 3 основных метода для оценки качества результатов сведения потенциально эквивалентных единиц, каждый из которых, тем не менее требует оптимизации:
Качественный отсмотр результатов работы моделей и элайнеров специалистами (ресурсозатратно) 
Создание золотого датасета / готового датасета выровненных текстов, который может быть использован для оценки качества выравнивания (в отличие от Цветной Триоди, результатов выравнивания которой в готовом виде нет). В качестве источника создания такого датасета мб использованы выровненные тексты DHonorare (ЭТО ЕЩЕ МОЖНО СДЕЛАТЬ)
Создание золотого датасета + дообучение наиболее оптимальных моделей BERT на нём
Наш репозиторий (что положить/проверить):
тексты (полные + по неделям/дням)
лемматизированные тексты (прогнать через код на гитхабе триодь целиком или оставим только службу вознесения?)
можно положить результаты LF-aligner
csv со структурной разметкой
[ ] положить для работы с html от Льва
код для работы с моделями
[ ] мне запушить
золотой тестовый датасет и показатели качества различных моделей
[ ] можно собрать датасет предложений на 1000 с DHonorare и померить качество нескольких моделей с Hugging Face (последний код нейросети)
[ ] то же самое сделать с LF-aligner (если нужно положить результаты от него)
Цели

Не смотря на то, что изначальные исследовательские цели не финализированы, работа над проектом проявила множество особенностей/проблемных зон/вопросов, требующих дальнейшего уточнения.

Проект продолжается; мы продолжаем исследовать обозначенные методы и инструменты, а также искать новые решения, которые могут приблизить нас к искомому результату.

оптимизация алгоритма проверки качества сведения текстов
выравние текстов цветной триоди с оценкой качества
обернуть результаты в бд + интеграция в литуркорпору

